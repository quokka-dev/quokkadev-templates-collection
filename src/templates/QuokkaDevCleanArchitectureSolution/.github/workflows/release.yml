name: Releasing

on:
  push:
    branches:
      - release-**

permissions: write-all

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet-version: ['6.0.x' ]

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3 
        with:
          fetch-depth: 0           

      - name: Cache NuGet
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-  

      - name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
     
      - uses: paulhatch/semantic-version@v4.0.2
        name: Calculate version
        with:  
          tag_prefix: "v"          
          major_pattern: "(MAJOR)"          
          minor_pattern: "(MINOR)"          
          format: "${major}.${minor}.${patch}-rc${increment}"
        id: calculate_version

      # SonarCloud configuration

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'        
        run: |
          mkdir -p .sonar/scanner                
          dotnet tool install dotnet-sonarscanner --tool-path .sonar/scanner
 
      # end SonarCloud configuration

      - name: Install dependencies
        run: dotnet restore      
      
      - name: Run format      
        run: |
          dotnet format --verify-no-changes
      
      # Test and reporting

      - name: Run tests
        # For exclude some projects from test coverage append:
        # DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile=**/QuokkaDev.Templates.SomeProject/**/*.cs
        run: dotnet test --no-restore --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage" --results-directory coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover,cobertura
      
      - name: Generate Unit Test Report
        uses: zyborg/dotnet-tests-report@v1
        with:          
          report_name: QuokkaDev.Templates Test Report
          report_title: QuokkaDev.Templates Test Report
          github_token: ${{ secrets.GITHUB_TOKEN }}
          set_check_status_from_test_outcome: true
    
      - name: Copy Coverage To Predictable Location
        run: |
          cp coverage/*/coverage.cobertura.xml coverage/coverage.cobertura.xml
          cp coverage/*/coverage.opencover.xml coverage/coverage.opencover.xml
        
      - name: Generate QuokkaDev.Templates Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.0.2      
        with:
          filename: coverage/coverage.cobertura.xml
          badge: true
          format: 'markdown'
          output: 'both'
          
      - name: Publish QuokkaDev.Templates Code Coverage Summary Report
        uses: LouisBrunner/checks-action@v1.2.0
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Code coverage
          conclusion: ${{ job.status }}          
          output: | 
            {"summary":"Code Coverage"}
          output_text_description_file: code-coverage-results.md      

      # Build

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}        
        run: |
          .sonar/scanner/dotnet-sonarscanner begin /k:"quokka-dev_quokkadev-project-key" /o:"quokka-dev" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="coverage/coverage.opencover.xml"
          dotnet build --configuration Release --no-restore /p:Version=${{ steps.calculate_version.outputs.version }}
          .sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Publish  

      # Standalone application on Azure
      
      #- uses: azure/webapps-deploy@v2
      #  with:
      #    publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
      #    app-name: my-app-name
      #    slot-name: develop
      #    package: ./SampleWebApplication/'