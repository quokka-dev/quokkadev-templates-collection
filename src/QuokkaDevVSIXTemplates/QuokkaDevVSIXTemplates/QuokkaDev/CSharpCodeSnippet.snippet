<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>HttpGet Method</Title>
			<Shortcut>qHttpGet</Shortcut>
			<Description>Add a HttpGet method to controller</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>				
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[/// <summary>
        /// $Name$
        /// </summary>
        /// <param name="id"></param>
		/// <returns></returns>
		[HttpGet("{id}")]
		[Authorize(Policy = "MyPolicy"]
        public async Task<IActionResult> $Name$(string id)
        {            
            return Ok();
        }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the method</ToolTip>
					<Default>Get</Default>
				</Literal>				
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>HttpPost Method</Title>
			<Shortcut>qHttpPost</Shortcut>
			<Description>Add a HttpPost method to controller</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>				
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[/// <summary>
        /// $Name$
        /// </summary>
        /// <param name="$Payload$"></param>
		/// <returns></returns>
		[HttpPost()]
		[Authorize(Policy = "MyPolicy"]
        public async Task<IActionResult> $Name$([FromBody]$Type$ $Payload$)
        {            
            return Ok();
        }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the method</ToolTip>
					<Default>Post</Default>
				</Literal>
				<Literal>
					<ID>Type</ID>
					<ToolTip>Type of the payload</ToolTip>
					<Default>object</Default>
				</Literal>
				<Literal>
					<ID>Payload</ID>
					<ToolTip>Payload parameter name</ToolTip>
					<Default>payload</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>HttpPut Method</Title>
			<Shortcut>qHttpPut</Shortcut>
			<Description>Add a HttpPut method to controller</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[/// <summary>
        /// $Name$
        /// </summary>
        /// <param name="$Payload$"></param>
		/// <returns></returns>
		[HttpPut("{$Id$}")]
		[Authorize(Policy = "MyPolicy"]
        public async Task<IActionResult> $Name$([FromRoute]string $Id$, [FromBody]$Type$ $Payload$)
        {            
            return Ok();
        }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Id</ID>
					<ToolTip>Name of the id parameter</ToolTip>
					<Default>id</Default>
				</Literal>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the method</ToolTip>
					<Default>Put</Default>
				</Literal>
				<Literal>
					<ID>Type</ID>
					<ToolTip>Type of the payload</ToolTip>
					<Default>object</Default>
				</Literal>
				<Literal>
					<ID>Payload</ID>
					<ToolTip>Payload parameter name</ToolTip>
					<Default>payload</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>HttpDelete Method</Title>
			<Shortcut>qHttpDelete</Shortcut>
			<Description>Add a HttpDelete method to controller</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[/// <summary>
        /// $Name$
        /// </summary>
        /// <param name="id"></param>
		/// <returns></returns>
		[HttpDelete("{id}")]
		[Authorize(Policy = "MyPolicy"]
        public async Task<IActionResult> $Name$(string id)
        {            
            return Ok();
        }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the method</ToolTip>
					<Default>Delete</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Add Authorization</Title>
			<Shortcut>qAddAuth</Shortcut>
			<Description>Add authorization to service collection</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[//Add authorization Policies
            services.AddAuthorization(options =>
            {
                options.AddPolicy("$Name$",
                    policy =>
                    {
                        policy.AuthenticationSchemes = new List<string>() { JwtBearerDefaults.AuthenticationScheme };
						policy.RequireAuthenticatedUser();
                        //policy.Requirements.Add(new MyCustomRequirement());
                    });
            });]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the policy</ToolTip>
					<Default>MyPolicy</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Add Authorization Policy</Title>
			<Shortcut>qPolicy</Shortcut>
			<Description>Add policy to autorization</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[options.AddPolicy("$Name$",
                    policy =>
                    {
                        policy.AuthenticationSchemes = new List<string>() { JwtBearerDefaults.AuthenticationScheme };
						policy.RequireAuthenticatedUser();
                    //policy.Requirements.Add(new MyCustomRequirement());
                    });]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the policy</ToolTip>
					<Default>MyPolicy</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Add CORS Policy</Title>
			<Shortcut>qCors</Shortcut>
			<Description>Add Cors to service collection</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[//remember to call app.UseCors("$Name$"); in Configure()
			services.AddCors(o => o.AddPolicy("$Name$", builder =>
            {
                builder.WithOrigins(Config.GetValue<string>("AllowedHosts"))
                       .AllowAnyMethod()
                       .AllowAnyHeader();
            }));]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the policy</ToolTip>
					<Default>DefaultPolicy</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Dapper query</Title>
			<Shortcut>qDapquery</Shortcut>
			<Description>Add dapper query</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();

                var result = await connection.QueryAsync<dynamic>(
                   @"select * FROM MyTable t                        
                        WHERE t.Id=@id"
                        , new { id }
                    );                
            }]]>
			</Code>			
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Dapper Stored</Title>
			<Shortcut>qDapstored</Shortcut>
			<Description>Add dapper call to stored procedure</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[var p = new DynamicParameters();
				p.Add("@myParams", "myParamsValue");
                
				var result = await connection.Query([$SName$], p, commandType: CommandType.StoredProcedure);}]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the stored procedure</ToolTip>
					<Default>MyStored</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>xUnit Test Method</Title>
			<Shortcut>qxunit</Shortcut>
			<Description>Add a xUnit Test Method</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[[Fact(DisplayName = "$Name$")]
        public void $Name$()
        {
            // Arrange

            // Act
            
            // Assert            
            true.Should().BeTrue();
        }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the method</ToolTip>
					<Default>Test</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>xUnit async Test Method</Title>
			<Shortcut>qxunitasync</Shortcut>
			<Description>Add a xUnit async Test Method</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[[Fact(DisplayName = "$Name$")]
        public async Task $Name$()
        {
            // Arrange

            // Act
            
            // Assert            
            true.Should().BeTrue();
        }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the async method</ToolTip>
					<Default>Test</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Create mock</Title>
			<Shortcut>qmock</Shortcut>
			<Description>Create and setup a mock</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[var $MockName$ = new Mock<$MockType$>();
        $MockName$.Setup(m => m.Equals(It.IsAny<$MockType$>())).Returns(true);
        $MockType$ obj = $MockName$.Object;]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>MockName</ID>
					<ToolTip>Name of the mock variable</ToolTip>
					<Default>mock</Default>
				</Literal>
				<Literal>
					<ID>MockType</ID>
					<ToolTip>Type of the mock variable</ToolTip>
					<Default>object</Default>
				</Literal>			
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Add collection to aggregate</Title>
			<Shortcut>qcoll</Shortcut>
			<Description>Add collection to aggregate</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[private readonly List<$Type$> _$Name$ = [];
        public IReadOnlyCollection<$Type$> $Name$ => _$Name$.AsReadOnly();]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Type</ID>
					<ToolTip>Type of the collection</ToolTip>
					<Default>object</Default>
				</Literal>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the collection</ToolTip>
					<Default>MyCollection</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Create domain event</Title>
			<Shortcut>qevent</Shortcut>
			<Description>Create domain event</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[public sealed record $Name$Event() : IDomainEvent
    {
    }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the event</ToolTip>
					<Default>MyDomain</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Create a specification</Title>
			<Shortcut>qspec</Shortcut>
			<Description>Create a specification for an aggregate</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[public sealed class $Name$Specification : Specification<$AggregateType$>
    {    
        public $Name$Specification()
        {            
        }

        public override Expression<Func<$AggregateType$, bool>> ToExpression()
        {
            return agg => true;
        }
    }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the specification</ToolTip>
					<Default>MySpec</Default>
				</Literal>
				<Literal>
					<ID>AggregateType</ID>
					<ToolTip>Aggregate type</ToolTip>
					<Default>MyAggregateType</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Custom converter</Title>
			<Shortcut>qefconverter</Shortcut>
			<Description>Create an EF custom converter</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[internal class $Name$Converter : ValueConverter<$Type1$, $Type2$>
    {
        public $Name$Converter()
        : base(
             v => ($Type2$)v,
             v => ($Type1$)v)
        {
        }
    }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the converter</ToolTip>
					<Default>New</Default>
				</Literal>
				<Literal>
					<ID>Type1</ID>
					<ToolTip>First type</ToolTip>
					<Default>Guid</Default>
				</Literal>
				<Literal>
					<ID>Type2</ID>
					<ToolTip>Second type</ToolTip>
					<Default>string</Default>
				</Literal>
			</Declarations>
		</Snippet>
	</CodeSnippet>
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Entity config</Title>
			<Shortcut>qefconfig</Shortcut>
			<Description>Create an EF entity configuration</Description>
			<Author>Fabio Cometti</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="CSharp">
				<![CDATA[public class $Name$Configuration : IEntityTypeConfiguration<$Name$>
    {
        public void Configure(EntityTypeBuilder<$Name$> builder)
        {
            builder.ToTable(nameof($Name$));
            builder.HasKey(c => c.Id);
        }
    }]]>
			</Code>
			<Declarations>
				<Literal>
					<ID>Name</ID>
					<ToolTip>Name of the configuration</ToolTip>
					<Default>New</Default>
				</Literal>				
			</Declarations>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>